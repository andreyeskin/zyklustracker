package at.fhj.andrey.zyklustracker.datenbank;

import androidx.room.Entity;
import androidx.room.PrimaryKey;
import androidx.room.TypeConverters;
import java.time.LocalDate;
import java.util.List;

/**
 * WohlbefindenEintrag - Entit√§tsklasse f√ºr t√§gliche Gesundheits- und Befindlichkeitsdaten
 *
 * Diese Klasse speichert alle Informationen, die eine Nutzerin t√§glich √ºber ihr
 * Wohlbefinden und ihre Symptome erfassen kann. Pro Tag kann nur ein Eintrag existieren.
 *
 * Datenstruktur:
 * - Tabelle: "wohlbefinden_eintraege"
 * - Eindeutigkeit: Ein Datum = Ein Eintrag
 * - Update-Verhalten: Bestehende Eintr√§ge werden √ºberschrieben
 *
 * Gespeicherte Informationen:
 * 1. Menstruationsdaten: Blutungsst√§rke und Charakter
 * 2. Schmerzbewertung: Von "Keine" bis "Krampfartig"
 * 3. Stimmung: Emotionale Verfassung mit Emoji-Unterst√ºtzung
 * 4. Begleitsymptome: Multiple-Choice-Liste h√§ufiger Beschwerden
 * 5. Vitaldaten: Temperatur, Puls, SpO‚ÇÇ (f√ºr zuk√ºnftige Sensor-Integration)
 *
 * Datenkonvertierung:
 * - LocalDate: Automatische String-Konvertierung via DatumKonverter
 * - List<String>: JSON-Serialisierung f√ºr Symptom-Listen
 *
 * Verwendung in der App:
 * - WohlbefindenActivity: Haupteingabe-Interface
 * - StatistikActivity: Auswertung und Trends
 * - Zuk√ºnftig: Integration mit Wearables (Amazfit Band 5)
 *
 * @author Andrey Eskin
 * @version 1.0
 * @since Mai 2025
 */
@Entity(tableName = "wohlbefinden_eintraege")
@TypeConverters(DatumKonverter.class)
public class WohlbefindenEintrag {

    /**
     * Prim√§rschl√ºssel der Entit√§t.
     * Auto-generiert von Room, nicht manuell setzen.
     */
    @PrimaryKey(autoGenerate = true)
    private int id;

    /**
     * Datum des Eintrags - fungiert als logischer Prim√§rschl√ºssel.
     *
     * Gesch√§ftslogik:
     * - Pro Tag kann nur ein Eintrag existieren
     * - Bei erneuter Eingabe wird der bestehende Eintrag aktualisiert
     * - Standardwert: Aktuelles Datum bei Erstellung
     */
    private LocalDate datum;

    /**
     * Intensit√§t der Menstruationsblutung.
     *
     * M√∂gliche Werte:
     * - "Sehr leicht": Minimale Blutung, Slipeinlage ausreichend
     * - "Leicht": Schwache Blutung, normale Binde/Tampon
     * - "Mittel": Normale Blutungsst√§rke
     * - "Stark": Starke Blutung, h√§ufiger Wechsel n√∂tig
     * - null/empty: Keine Angabe oder keine Blutung
     */
    private String blutungsstaerke;

    /**
     * Subjektive Schmerzintensit√§t w√§hrend der Menstruation.
     *
     * Schmerzskala:
     * - "Keine": Keine sp√ºrbaren Schmerzen
     * - "Leicht": Ertr√§gliche, gelegentliche Schmerzen
     * - "Mittel": Sp√ºrbare Schmerzen, beeintr√§chtigen leicht
     * - "Stark": Starke Schmerzen, deutliche Beeintr√§chtigung
     * - "Krampfartig": Intensive Kr√§mpfe, starke Beeintr√§chtigung
     * - null/empty: Keine Angabe
     */
    private String schmerzLevel;

    /**
     * Emotionale Verfassung und Stimmung.
     *
     * Stimmungsskala mit Emojis:
     * - "üòÄ Sehr gut": Sehr positive Stimmung
     * - "üôÇ Gut": Gute Stimmung
     * - "üòê Mittel": Neutrale Stimmung
     * - "üôÅ Schlecht": Schlechte Stimmung
     * - null/empty: Keine Angabe
     *
     * Hinweis: Emojis werden bei Statistiken automatisch entfernt
     */
    private String stimmung;

    /**
     * Liste der Begleitsymptome als JSON-Array.
     *
     * H√§ufige Symptome:
     * - "Kopfschmerzen": Cephalgie verschiedener Intensit√§t
     * - "√úbelkeit": Nausea, Unwohlsein
     * - "M√ºdigkeit": Fatigue, Energiemangel
     * - "R√ºckenschmerzen": Dorsalgie, unterer R√ºcken
     * - "empfindliche Br√ºste": Mastalgie, Spannungsgef√ºhl
     *
     * Technische Umsetzung:
     * - Speicherung als JSON-String: ["Kopfschmerzen", "√úbelkeit"]
     * - Automatische Konvertierung durch DatumKonverter
     * - Mehrfachauswahl m√∂glich
     */
    private List<String> symptome;

    // ===== VITALDATEN F√úR SENSOR-INTEGRATION =====
    // Diese Felder sind f√ºr die zuk√ºnftige Integration mit dem Amazfit Band 5 vorgesehen

    /**
     * K√∂rpertemperatur in Grad Celsius.
     *
     * Zuk√ºnftige Verwendung:
     * - Automatische Erfassung via Amazfit Band 5
     * - Basaltemperatur f√ºr Eisprung-Erkennung
     * - Trend-Analysen f√ºr Zyklusphase-Bestimmung
     *
     * Normbereich: 36.0 - 37.5¬∞C
     * Speicherung: Float f√ºr Dezimalstellen (z.B. 36.7¬∞C)
     */
    private Float temperatur;

    /**
     * Ruhepuls in Schl√§gen pro Minute.
     *
     * Zuk√ºnftige Verwendung:
     * - Kontinuierliche Messung via Wearable
     * - Zyklusabh√§ngige Schwankungen erkennen
     * - Stressindikator und Gesundheitsmonitoring
     *
     * Normbereich: 60-100 bpm (altersabh√§ngig)
     * Speicherung: Integer f√ºr ganze Schl√§ge
     */
    private Integer puls;

    /**
     * Sauerstoffs√§ttigung im Blut (SpO‚ÇÇ) in Prozent.
     *
     * Zuk√ºnftige Verwendung:
     * - Pulsoxymetrie via Amazfit Band 5
     * - Fr√ºherkennung von Atemwegsinfekten
     * - Allgemeine Gesundheits√ºberwachung
     *
     * Normbereich: 95-100%
     * Speicherung: Integer f√ºr Prozent-Werte
     */
    private Integer spo2;

    // ===== KONSTRUKTOREN =====

    /**
     * Leerer Konstruktor - erforderlich f√ºr Room.
     * Room verwendet Reflection zur Objekterstellung.
     */
    public WohlbefindenEintrag() {}

    /**
     * Konstruktor f√ºr die Erstellung mit Datum.
     * Standardkonstruktor f√ºr neue Eintr√§ge.
     *
     * @param datum Das Datum des Wohlbefinden-Eintrags
     */
    public WohlbefindenEintrag(LocalDate datum) {
        this.datum = datum;
    }

    // ===== GETTER UND SETTER METHODEN =====
    // Room verwendet diese Methoden f√ºr Datenbankoperationen

    /**
     * Gibt die eindeutige ID des Eintrags zur√ºck.
     *
     * @return Auto-generierte Datenbank-ID
     */
    public int getId() {
        return id;
    }

    /**
     * Setzt die ID des Eintrags.
     * Normalerweise nur von Room verwendet.
     *
     * @param id Die zu setzende ID
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gibt das Datum des Eintrags zur√ºck.
     *
     * @return LocalDate des Wohlbefinden-Eintrags
     */
    public LocalDate getDatum() {
        return datum;
    }

    /**
     * Setzt das Datum des Eintrags.
     *
     * @param datum Das zu setzende Datum
     */
    public void setDatum(LocalDate datum) {
        this.datum = datum;
    }

    /**
     * Gibt die Blutungsst√§rke zur√ºck.
     *
     * @return String mit Blutungsintensit√§t oder null
     */
    public String getBlutungsstaerke() {
        return blutungsstaerke;
    }

    /**
     * Setzt die Blutungsst√§rke.
     *
     * @param blutungsstaerke Die Blutungsintensit√§t
     */
    public void setBlutungsstaerke(String blutungsstaerke) {
        this.blutungsstaerke = blutungsstaerke;
    }

    /**
     * Gibt das Schmerzlevel zur√ºck.
     *
     * @return String mit Schmerzintensit√§t oder null
     */
    public String getSchmerzLevel() {
        return schmerzLevel;
    }

    /**
     * Setzt das Schmerzlevel.
     *
     * @param schmerzLevel Die Schmerzintensit√§t
     */
    public void setSchmerzLevel(String schmerzLevel) {
        this.schmerzLevel = schmerzLevel;
    }

    /**
     * Gibt die Stimmung zur√ºck.
     *
     * @return String mit Stimmungsbezeichnung (inklusive Emoji) oder null
     */
    public String getStimmung() {
        return stimmung;
    }

    /**
     * Setzt die Stimmung.
     *
     * @param stimmung Die Stimmungsbezeichnung
     */
    public void setStimmung(String stimmung) {
        this.stimmung = stimmung;
    }

    /**
     * Gibt die Liste der Symptome zur√ºck.
     *
     * @return Liste von Symptom-Strings oder null
     */
    public List<String> getSymptome() {
        return symptome;
    }

    /**
     * Setzt die Liste der Symptome.
     *
     * @param symptome Die Liste der Begleitsymptome
     */
    public void setSymptome(List<String> symptome) {
        this.symptome = symptome;
    }

    /**
     * Gibt die K√∂rpertemperatur zur√ºck.
     *
     * @return Temperatur in ¬∞C oder null
     */
    public Float getTemperatur() {
        return temperatur;
    }

    /**
     * Setzt die K√∂rpertemperatur.
     *
     * @param temperatur Temperatur in ¬∞C
     */
    public void setTemperatur(Float temperatur) {
        this.temperatur = temperatur;
    }

    /**
     * Gibt den Puls zur√ºck.
     *
     * @return Herzfrequenz in bpm oder null
     */
    public Integer getPuls() {
        return puls;
    }

    /**
     * Setzt den Puls.
     *
     * @param puls Herzfrequenz in bpm
     */
    public void setPuls(Integer puls) {
        this.puls = puls;
    }

    /**
     * Gibt die Sauerstoffs√§ttigung zur√ºck.
     *
     * @return SpO‚ÇÇ in % oder null
     */
    public Integer getSpo2() {
        return spo2;
    }

    /**
     * Setzt die Sauerstoffs√§ttigung.
     *
     * @param spo2 SpO‚ÇÇ in %
     */
    public void setSpo2(Integer spo2) {
        this.spo2 = spo2;
    }

    /**
     * √úberschreibt toString() f√ºr bessere Debugging-Ausgabe.
     *
     * @return String-Repr√§sentation des Objekts
     */
    @Override
    public String toString() {
        return "WohlbefindenEintrag{" +
                "id=" + id +
                ", datum=" + datum +
                ", blutungsstaerke='" + blutungsstaerke + '\'' +
                ", schmerzLevel='" + schmerzLevel + '\'' +
                ", stimmung='" + stimmung + '\'' +
                ", symptome=" + symptome +
                ", temperatur=" + temperatur +
                ", puls=" + puls +
                ", spo2=" + spo2 +
                '}';
    }
}